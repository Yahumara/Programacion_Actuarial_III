x<- 1
x <- 2
x <- 1
x <- 1
x <- 2
print(x)
#Aqui se esta realizando una asignacion
x <- 1
x <- 2
#La asignacion no me permitio visualizar el resultado, para ellos solicito una impresion
print(x)
#al poner mayuscula que no es definida me marcara error
print(X)
#La alternativa es solicitar una impresion implicita
X
#La asignacion puede hacerse tambien en textos
msg <- "Hola"
#Al solicitar una impresion me debera enseñar el mensaje
print(msg)
#Aqui se esta realizando una asignacion
x <- 1
x <- 2
#La asignacion no me permitio visualizar el resultado, para ellos solicito una impresion
print(x)
#al poner mayuscula que no es definida me marcara error
print(X)
#La alternativa es solicitar una impresion implicita
x
#La asignacion puede hacerse tambien en textos
msg <- "Hola"
#Al solicitar una impresion me debera enseñar el mensaje
print(msg)
x <- #Expresion incompleta
3
x <- #Expresion incompleta
x <- 1:20
x
y <- 3:9
y
z <- 99:43
z
w <- 3:14.5
w
x
z
Inf
exp(-Inf)
1/0
Inf-Inf
Inf+Inf
x <- c(TRUE, FALSE, TRUE, F, F, T)
x
x <- c(1L, 3L, 5L, -4L)
x <- c(1,3,5,-4)
x <- c(1+1i,3+4i,-5-6i)
x <- c("a","b","c","Hola","Mundo")
x
x <- vector("numeric", length = 10 )
x
y <- c(1.7,"a")
y
y <- c(TRUE,2)
y <- c(TRUE,2L)
y <- c(FALSE, 2L, 5, 5+4i)
y
x <- list(1, "a", TRUE, 3+2i, 5L)
x
x <- list(1, "a", TRUE, 3+2i, 5L, 1:50)
x
m <- matrix(nrow = 2, ncol=3)
m
dim(m)
attributes(m)
m <- matrix(data = 1:6, nrow=2, ncol=3)
m
m <- matrix(1:6,2,3)
m
m <- matrix(NA,2,3)
m
m <- matrix(data = 1:6, nrow=2, ncol=3, byrow= TRUE)
m
m <- matrix(1:6,2,3,T)
m
m <- 1:10
dim(m)
m <- 1:10
m
dim(m) <- c(2,5)
m
x <- 1:3
y <- 10:12
#CBind va a unir columnas
cbind(x,y)
rbind(x,y)
x <- factor(c("Si", "Si", "No", "No", "Si"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"))
x
table(x)
unclass(x)
?factor
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"),levels = c("Rojo","Amarillo","Verde","Naranja"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"),levels = c("Rojo","Amarillo","Verde","Azul"))
x
unclass(x)
#Valores faltantes
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
#Valores faltantes
x <- c(1,2,NA,10,3)
is.na(x)       #Detecta los valores faltantes
is.nan(x)      #Valor no numerico que no es faltante
y <- c(1,2,NaN,10,3)
is.na(y)      #Detecta los valores faltantes
is.nan(y)     #Valor no numerico que no es faltante
View(m)
View(m)
na <- data.frame(foo = 1:4, bar = c(T, T, F, F))
na
nrow(na)
ncol(na)
mo <- 1:3
names(mo)
names(mo) <- c("foo", "bar", "norf")
mo
names(mo)
nu <- list(a=1,b=2,c=3)
nu
ma <- matrix(1:4, nrow=2, ncol=2)
ma
dimnames(ma) <- list(c("a", "b"), c("C", "d"))
ma
read.table
read.table?
?read.table
y <- data.frame(a=1,b="a")
y
dput(y)
dput(y, file="~\GitHub\Programacion_Actuarial_III/y.R")
M <- data.frame(mtcars)
M
dput(M)
dput(y, file="Carros.R")
Na <- data.frame(mtcars)
Na
dput(Na)
dput(Na, file="Carros.R")
dput(Na, file="~/GitHub\Programacion_Actuarial_III/Carros.R")
Na <- data.frame(mtcars)
Na
dput(Na)
dput(Na, file="Carros.R")
dput ( Na , file = " ~ / GitHub / Programacion_Actuarial_III / Carros.R " )
dput ( Na, file = " ~ / GitHub / Programacion_Actuarial_III / Carros.R " )
dput ( Na, file = " ~\Documents\GitHub\Programacion_Actuarial_III\Carros.R ")
dput ( Na, file = " ~\GitHub\Programacion_Actuarial_III\Carros.R ")
dput ( Na, file = "\GitHub\Programacion_Actuarial_III\Carros.R ")
dput ( Na, file = "CARROS.R")
Na <- data.frame(mtcars)
Na
dput(Na)
dput ( Na, file = "CARROS.R")
dput(Na, file="~/GitHub/Programacion_Actuarial_III/Carros.R")
Na <- data.frame(mtcars)
Na
dput(Na)
dput(Na, file="~/GitHub/Programacion_Actuarial_III/Carros.R")
CarrosAnnia <- dget(file="~/GitHub/Programacion_Actuarial_III/Carros.R")
View(CarrosAnnia)
Na <- data.frame(mtcars)
Na
dput(Na)
dput(Na, file="~/GitHub/Programacion_Actuarial_III/Carros.R")
CarrosAnnia <- dget(file="~/GitHub/Programacion_Actuarial_III/Carros.R")
View(CarrosAnnia)
View(CarrosAnnia)
View(CarrosAnnia)
Pa <- data.frame(mtcars)
Pa
dput(Pa)
dput(Pa, file="~/GitHub/Programacion_Actuarial_III/Carros.R")
CarrosAnnia <- dget(file="~/GitHub/Programacion_Actuarial_III/Carros.R")
Pa <- data.frame(mtcars)
Pa
dput(Pa)
dput(Pa, file="~/GitHub/Programacion_Actuarial_III/CARROS.R")
CarrosAnnia <- dget(file="~/GitHub/Programacion_Actuarial_III/CARROS.R")
dput(Pa, file="~/GitHub/Programacion_Actuarial_III/CARROS.R")
Pa <- data.frame(mtcars)
Pa
dput(Pa)
dput(Pa, file="~/GitHub/Programacion_Actuarial_III/CARROS.R")
CarrosAnnia <- dget(file="~/GitHub/Programacion_Actuarial_III/CARROS.R")
setwd("~/GitHub/Programacion_Actuarial_III")
#Extraccion de calores faltantes
airquality[1;6,]
airquality[1:6,]
complete.cases(airquality[1:10,])
complete.cases(airquality[1:6,])
completos <- complete.cases(airquality)
airquality[completos,]
airquality[1:6,]
complete.cases(airquality[1:6,])
complete.cases(airquality[1:10,])
completos <- complete.cases(airquality)
data <- airquality[completos,]
data[1:6,]
x <- 1:4; y<- 6:9
x+y
x>2
x>=2
y==8   #Para ver la igualdad de una variable se usa ==
x*y
x/y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%*%y  #Se utiliza el simbolo de % para que haga la operacion corectamente de fila por columna como se realiza en las matrices sino lo hace directo de elemento por elemento
y%*%x
x<- 3
if(x>5)
{"El numero es mayor a 5"}
else
{"El numero es menor que 5"}
x<- 3
if(x>5) {
"El numero es mayor a 5"
}else {
"El numero es menor que 5"
}
if (x>5) {
"es mayor a 5"
} else if (x<5){
"es menor a 5"
} else {
"es igual a 5"
}
x<- 10
if (x>5) {
"es mayor a 5"
} else if (x<5){
"es menor a 5"
} else {
"es igual a 5"
}
x<- 5
if (x>5) {
"es mayor a 5"
} else if (x<5){
"es menor a 5"
} else {
"es igual a 5"
}
if (x<5) {
"es menor a 5"
} else if (x<=10){
"esta entre 5 y 10"
} else {
"mayor a 10"
}
if (x>3){
y <- 10
}else {
y <- 0
}
y
y <- if(x>3) {
10
}else {
0
}
y
for(i in 1:10)
print(i)
for(i in 1:10) {
print(i)
}
for(i in c("a","b","c")) {
print(i)
}
x <- c("a","b","c")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letra in x) {
print(letra)
}
for(i in 1:4) print(x[i])
x <- c("a","b","c","d")
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letra in x) {
print(letra)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
count <- 0
while(count<10){
print(count)
count <- count + 1
}
z <- 5
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
}
set.seed(1) #A partir de este numero se empiezan a generar los numeros aleatorios
z <- 5
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5) #numero de aciertos en una cantidad de intentos, probabilidad de exitos
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
}
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
}
print("se realizaron "); print(contador); print("pasos")
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
vec <- z
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
rbind(z)
}
print("se realizaron "); print(contador); print("pasos")
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
vec <- z
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
rbind(z)
print(z)
}
print("se realizaron "); print(contador); print("pasos")
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
}
print("se realizaron "); print(contador); print("pasos")
