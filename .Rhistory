z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
rbind(z)
print(z)
}
print("se realizaron "); print(contador); print("pasos")
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
}
print("se realizaron "); print(contador); print("pasos")
x
#Lista
x <- list(1, "a", TRUE, 3+2i, 5L, 1:50)
x
#Matrices
#Las matrices son vectores con un atributo llamado dimension, este atributo es un vector en si mismo compuesto de dos elementos
m <- matrix(nrow = 2, ncol=3) #Esta es una matriz desordenada
m <- matrix(NA,2,3)
m
dim(m)
attributes(m)
#Como llenar una matriz
m <- matrix(data = 1:6, nrow=2, ncol=3) #Matrix ordenada
m <- matrix(1:6,2,3)
m
#Estas son formas equivalentes de hacerlo pra ambas matrices
#La manera automatica de llenarse fue columna por columna
#Si yo quisiera que s ellenara fila por fila seria:
m <- matrix(data = 1:6, nrow=2, ncol=3, byrow= TRUE)
m <- matrix(1:6,2,3,T)
m
#Una manera alternativa de crear una matriz es desde un vector y modificar su dimension
m <- 1:10
m
dim(m) <- c(2,5)
m
#Otra forma de crear una matriz es uniendo diferentes vectores
x <- 1:3
y <- 10:12
#CBind va a unir columnas y RBind une filas
cbind(x,y)
rbind(x,y)
#Factores
#Factores sirve para variables que no son numericas
x <- factor(c("Si", "Si", "No", "No", "Si"))
x
#Factores por orden alfabetico
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"))
x
#table te dice cuantas veces aparece cada una de las cosas
table(x)
unclass(x)
#Factores con orden definido
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"),levels = c("Rojo","Amarillo","Verde","Naranja"))
x
unclass(x)
#Valores faltantes
x <- c(1,2,NA,10,3)
is.na(x)       #Detecta los valores faltantes
is.nan(x)      #Valor no numerico que no es faltante
y <- c(1,2,NaN,10,3)
is.na(y)      #Detecta los valores faltantes
is.nan(y)     #Valor no numerico que no es faltante
#Data Frames puede tener elementos de diferentes clases y se utiliza para matrices.
#foo y bar son variables pueden ser las que sean.
na <- data.frame(foo = 1:4, bar = c(T, T, F, F))
na
nrow(na)   #Cuenta el numero de filas
ncol(na)   #Cuenta el numero de columnas
mo <- 1:3
names(mo)
names(mo) <- c("foo", "bar", "norf") #Almacena el nombre de los elementos
mo
names(mo)
nu <- list(a=1,b=2,c=3)
nu
ma <- matrix(1:4, nrow=2, ncol=2)
ma
dimnames(ma) <- list(c("a", "b"), c("C", "d"))
ma
setwd("~/GitHub/Programacion_Actuarial_III")
x <- "Programacion Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file="data.R")
rm(x,y)
x
y
source("data.R")
x <- "Programacion Actuarial III"
y <- data.frame(a=1,b="a")
setwd("~/GitHub/Programacion_Actuarial_III")
x <- "Programacion Actuarial III"
y <- data.frame(a=1,b="a")
dump(c("x","y"),file="data.R")
rm(x,y)
x
y
source("data.R")
#Extraccion de elementos de un vector
#Creamos un vector
x <- c("a","b","c","c","d","e")
#Veamos el vector
x
#Extraemos elementos con []
x[1]
x[2]
#Tambien podemos extraer una secuencia de elementos
x[1:4]
#Es posible extraer los elementos que cumplen una restriccion
x[x>"b"]
#De manera equivalente se puede obtener un vector logico
u <- x=="c"
u
x[u]
x[5-3]
#Extraccion de elementos de una lista
#Creamos una lista
x <- list(foo=1:4,bar=0.6)
x
x[1]     #Conserva la clase del objeto de donde fueron extraidos los elementos
#El resultado es una lista que contiene al vector de la secuencia
x[[1]]  #Conserva la clase del objeto extraido
x$foo
#El resultado fue un vector como con [[]]
x["bar"]
x[["bar"]]
x <- list(foo=1:4,bar=0.6,baz= "Hola")
x[c(1,3)]
#Extrae los elementos no secuenciales 1 si, 2 no, 3 si
x[[c(1,3)]]
name <- "baz"
x[name]
x[[name]]
x$name
#Para anidar extracciones se utilizan los [[]]
#Se pueden extraer elementos de los elementos extraidos
x <- list(a= list(10, 12, 14), b= list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
#Extraccion de una matriz
x <- matrix(1:6,2,3)
x
#El resultado es un vector
x[1,2]
x[2,1]
#si dejamos solamente el espacio el resultado sera un vector
x[1,]
x[,2]
#Con drop=FALSE, se mantiene la dimension y el resultado sera una matriz
x[1,2, drop=F]
#Si usamos drop=FALSE, el resultado sera una matriz
x[1, ,drop=F]
#Creamos listas donde busca lo mas cercano o lo que se le parece al nombre que le estas dando
x <- list(aardvark = 1:5)
x$a
x[["a"]]
x[["a",exact=F]]
airquality[1:6,]
airquality[1:6,]
complete.cases(airquality[1:6,])
complete.cases(airquality[1:10,])
completos <- complete.cases(airquality)
data <- airquality[completos,]
#Al quedarse en blanco son todas las columnas
data[1:6,]
#Algunas operaciones
x <- 1:4; y<- 6:9 #se pueden poner varias instucciones en el mismo renglon separadas por un ;
x+y
x>2
x>=2
y==8   #Para ver la igualdad de una variable se usa ==
x*y
x/y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%*%y  #Se utiliza el simbolo de % para que haga la operacion corectamente de fila por columna como se realiza en las matrices sino lo hace directo de elemento por elemento
y%*%x  #No son conmutativas dan resultdos diferentes
#Estructuras de control uso del if
x<- 5
if(x>5) {
"El numero es mayor a 5"
}else {
"El numero es menor que 5"
}
if (x<5) {
"es menor a 5"
} else if (x<=10){
"esta entre 5 y 10"
} else {
"mayor a 10"
}
if (x>3){
y <- 10
}else {
y <- 0
}
y
#La expresion anterior es equivalente a:
y <- if(x>3) {
10
}else {
0
}
y
#Ciclos for
for(i in 1:10) {
print(i)
}
for(i in c("a","b","c")) {
print(i)
}
#La forma en que trabaja un for de R es mas similar al for each de visual basic
#se conoce el tamaño del vector
x <- c("a","b","c","d")
for(i in 1:4) {
print(x[i])
}
#seq along es una secuencia a lo largo de x
for(i in seq_along(x)) {
print(x[i])
}
for(letra in x) {
print(letra)
}
for(i in 1:4) print(x[i])
#Los ciclos for pueden ser anidados
#seq len es una secuencia de una determinada longitud
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
#ciclos while
count <- 0
while(count<10){
print(count)
count <- count + 1
}
#rbinom genera un numero aleatorio
set.seed(1) #A partir de este numero se empiezan a generar los numeros aleatorios
z <- 5
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5) #numero de aciertos en una cantidad de intentos, probabilidad de exitos
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
}
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
print(z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
}
print("se realizaron "); print(contador); print("pasos")
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
vec <- z
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
rbind(z)
print(z)
}
print("se realizaron "); print(contador); print("pasos")
#Aqui se esta realizando una asignacion
x <- 1
x <- 2
#La asignacion no me permitio visualizar el resultado, para ellos solicito una impresion
print(x)
#al poner mayuscula que no es definida me marcara error
print(X)
#La alternativa es solicitar una impresion implicita
x
#La asignacion puede hacerse tambien en textos
msg <- "Hola"
#Al solicitar una impresion me debera enseñar el mensaje
print(msg)
x <- #Expresion incompleta para salir de ella (dejar de ejecutar) utilizo las flechitas y le doy esc
3
x <-3 #Expresion incompleta para salir de ella (dejar de ejecutar) utilizo las flechitas y le doy esc
#Impresion de un arreglo (genera una secuencia numerica)
x <- 1:20
x
y <- 3:9
y
z <- 99:43
z
#El operador ":" me permite generar secuencias numericas de un principio a un fin"
w <- 3:14.5
w
# R nos permite trabajar con conceptos matematicos como los numeros complejos e infinitos.
Inf
1/0
#Es posible hacer algunas operaciones con este valor
exp(-Inf) #0
Inf + Inf #Inf
Inf - Inf #Nan
Inf * Inf #Inf
Inf / Inf #Nan
#Es posible crear un vector con la funcion c()
x <- c(TRUE, FALSE, TRUE, F, F, T) #Logical
x <- c(1L, 3L, 5L, -4L)   #iNTEGER
x <- c(1,3,5,-4)          #Numeric
x <- c(1+1i,3+4i,-5-6i)   #Complex
x <- c("a","b","c","Hola","Mundo")  #Character
#Otro posible camino seria con la funcion vector
x <- vector("numeric", length = 10 )
x #El vector se crea vacio
y <- c(1.7,"a")        #Caracter
y
y <- c(TRUE,2)         #Numeric
y <- c(TRUE,2L)        #Integer
y <- c(FALSE, 2L, 5, 5+4i)   #Complex
y
#Coercion forzada
x <- 0:6                 #Integer
as.numeric(x)            #Numeric
as.logical(x)            #Logcal- los 0 se vilven false y lo demas true
as.character(x)          #Character- todo es texto
#Errores en la coercion forzada
x <- c("a","b","c")
as.numeric(x)
as.logical(x)
as.complex(x)
x <-
"Programacion Actuarial III"
y <-
structure(list(a = 1, b = structure(1L, .Label = "a", class = "factor")), .Names = c("a",
"b"), row.names = c(NA, -1L), class = "data.frame")
#1.-creo el objeto
y <- data.frame(a=1,b="a")
y
#2. Estudio la manera en que se guardara
dput(y)
#3Lo guardo en mi disco duro
dput(y, file="\GitHub\Programacion_Actuarial_III/y.R")
dput(y, file="/GitHub/Programacion_Actuarial_III/y.R")
vec <-
set.seed(1)
z <- 5
contador <- 0
while(z>=3 && z<=10){
vec <- c(vec,z)
moneda <- rbinom(1,1,0.5)
if(moneda==1){   #caminata aleatoria
z <- z + 1
} else {
z <- z - 1
}
contador <- contador + 1
}
print(vec); print("se realizaron "); print(contador); print("pasos")
plot(vec) #solo te muestra los puntos
plot(vec,type="b") #te muetra los puntos unidos por lineas
suma2 <- function(x,y){
x+y
}
suma2(1,3) #4
mayor10 <- function(x){
seleccionados <- x>10
x[seleccionados]
}
mayor10(1:20) # me da los numeros del 11 al 20
mayor <- function(x, n=10){
seleccionados <- x>n
x[seleccionados]
}
mayor <- function(x, n=10){
x[x>n]
}
mayor10(1:20)
#Dado que la funcion tiene n=10 al no colocar el argumento en un
mayor(1:20)
#En una funcion si yo escribo los argumentos en orden no es necesario escribir el nombre del argumento
mayor(1:20, 15) #me da los resultados del 16 al 20
#Si escribes los argumentos en desorden, si es necesario
mayor(n=15,x=1:20)
promedioCol <- function(x, quitarNA=TRUE){
nc <- ncol(x)
medias <- vector("numeric", nc)
for(i in 1:nc){
medias[i] <- mean(x[,i], na.rm=quitarNA)
}
medias
}
x <- matrix(1:100,20,5)
promedioCol(x)
#se conoce como una operacion perezosa te enseña los resultados como los va haciendo y si encuentra un error hay se para
f <- function(a,b){
a^2
}
f(2)
#Marca error por que no tiene valor en b si se lo coloque corre de manera normal y deja de mandarme el error
g <- function(a,b){
print(a)
print(b)
}
g(3)
#Los ... significan un argumento, plot necesita x y y pero puede tener otra serie de argumentos que no sean requeridos por defolt
miplot <- function(x,y,tipo="l",...){
plot(x,y,type = tipo,...)
}
miplot(1:10,10:1)
plot(1:10,10:1)
miplot(1:10,10:1,main="Mi grafica")
plot(1:10,10:1,main="Mi grafica")
miplot(1:10,10:1,main="Mi grafica",perro="123")
#
#Los argumentos despues de los puntos suspensivos es necesario que los mandes lamar con todo y nombre
paste("Jose","Paz","Alex","Arlet","Susie","/")
paste("Jose","Paz","Alex","Arlet","Susie",sep="/")
mipaste <- function(sep=" ", ...){
paste(...,sep=sep)
}
mipaste ("/","Jose","Paz","Alex","Arlet","Susie")
#lapply te ayuda a sacar el promedio
x <- list(a=1:5,b=rnorm(10000))
x
lapply(x,mean)
x <- list(a=1:5,b=rnorm(10),c=rnorm(10,1),d=rnorm(10,2))
lapply(x,mean)
x <- 1:4
lapply(x,runif)
#Los numeros que genera runif se encuntran entre 15 y 5
x <- 1:4
lapply(x,runif, max=15,min=5)
#El resultado lo entrega como un vector por que el tamaño de los elementos de la lista es 1
x <- list(a=1:5,b=rnorm(10),c=rnorm(10,3),d=rnorm(10,5))
lapply(x,mean)
sapply(x,mean)
str(apply)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean) #margen 2 es columna
apply(x,1,sum) #margen 1 es fila
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile,probs=c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
rowMeans(a,dims=1)
list(rep(1,4), rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
f <- function(x,y){
x^2 + y/z
}
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
cubica <- hacer.potencia(3)
cuadrada <- hacer.potencia (2)
cubica(3)
cuadrada(2)
ls(environment(cubica))
get("n",environment(cubica))
ls(environment(cuadrada))
get("n",environment(cuadrada))
y <- 10
f <- function(x){
y <- 2
y^2+g(x)
}
g <- function(x){
x*y
}
f(3)
#Dates and Times en R
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
#MaryPaz 19/06/1998
inicio <- unclass(as.Date("1998-06-19"))
final <- unclass(as.Date("2018-04-02"))
final-inicio  #Dias vividos
weekdays(as.Date("1998-06-26"))
a <- as.POSIXct("1998-06-26")  #Almacenamiento de fechas
b <- as.POSIXlt("1998-06-26")
